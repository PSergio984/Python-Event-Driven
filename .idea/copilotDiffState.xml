<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$APPLICATION_CONFIG_DIR$/scratches/scratch.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$APPLICATION_CONFIG_DIR$/scratches/scratch.py" />
              <option name="originalContent" value="class BankAccount:&#10;    def __init__(self, account_holder, initial_balance=0):&#10;        self.account_holder = account_holder&#10;        self.balance = initial_balance&#10;&#10;    def deposit(self, amount):&#10;        if amount &gt; 0:&#10;            self.balance += amount&#10;            print(f&quot;Deposited: ${amount:.2f}. New balance: ${self.balance:.2f}.&quot;)&#10;        else:&#10;            print(&quot;Deposit amount must be positive.&quot;)&#10;&#10;    def withdraw(self, amount):&#10;        if 0 &lt; amount &lt;= self.balance:&#10;            self.balance -= amount&#10;            print(f&quot;Withdrew: ${amount:.2f}. New balance: ${self.balance:.2f}.&quot;)&#10;        elif amount &gt; self.balance:&#10;            print(&quot;Insufficient funds.&quot;)&#10;        else:&#10;            print(&quot;Withdrawal amount must be positive.&quot;)&#10;&#10;    def get_balance(self):&#10;        return self.balance&#10;&#10;def main():&#10;    account1 = BankAccount(account_holder=&quot;Eric Manabat&quot;, initial_balance=1000)&#10;    print(f&quot;Welcome to the Bank Account Manager, {account1.account_holder}!&quot;)&#10;    print(f&quot;Account starting balance: ${account1.get_balance():.2f}&quot;)&#10;    print(f&quot;-----------------------------------&quot;)&#10;    while True:&#10;        print(&quot;\nWhat would you like to do?&quot;)&#10;        print(&quot;1. Deposit\n2. Withdraw\n3. Check Balance\n4. Exit&quot;)&#10;        choice = input(&quot;Enter your choice (1-4): &quot;).strip()&#10;        if choice == '1':&#10;            amount_str = input(&quot;Enter amount to deposit: &quot;).strip()&#10;            try:&#10;                amount = float(amount_str)&#10;                account1.deposit(amount)&#10;            except ValueError:&#10;                print(&quot;Invalid amount. Please enter a number.&quot;)&#10;        elif choice == '2':&#10;            amount_str = input(&quot;Enter amount to withdraw: &quot;).strip()&#10;            try:&#10;                amount = float(amount_str)&#10;                account1.withdraw(amount)&#10;            except ValueError:&#10;                print(&quot;Invalid amount. Please enter a number.&quot;)&#10;        elif choice == '3':&#10;            print(f&quot;Current balance: ${account1.get_balance():.2f}&quot;)&#10;        elif choice == '4':&#10;            print(&quot;Thank you for using the Bank Account Manager. Goodbye!&quot;)&#10;            break&#10;        else:&#10;            print(&quot;Invalid choice. Please try again.&quot;)&#10;main()" />
              <option name="updatedContent" value="class BankAccount:&#10;    def __init__(self, account_holder, initial_balance=0):&#10;        self.account_holder = account_holder&#10;        self.balance = initial_balance&#10;&#10;    def deposit(self, amount):&#10;        if amount &gt; 0:&#10;            self.balance += amount&#10;            print(f&quot;Deposited: ${amount:.2f}. New balance: ${self.balance:.2f}.&quot;)&#10;        else:&#10;            print(&quot;Deposit amount must be positive.&quot;)&#10;&#10;    def withdraw(self, amount):&#10;        if 0 &lt; amount &lt;= self.balance:&#10;            self.balance -= amount&#10;            print(f&quot;Withdrew: ${amount:.2f}. New balance: ${self.balance:.2f}.&quot;)&#10;        elif amount &gt; self.balance:&#10;            print(&quot;Insufficient funds.&quot;)&#10;        else:&#10;            print(&quot;Withdrawal amount must be positive.&quot;)&#10;&#10;    def get_balance(self):&#10;        return self.balance&#10;&#10;def main():&#10;    account1 = BankAccount(account_holder=&quot;Eric Manabat&quot;, initial_balance=1000)&#10;    print(f&quot;Welcome to the Bank Account Manager, {account1.account_holder}!&quot;)&#10;    print(f&quot;Account starting balance: ${account1.get_balance():.2f}&quot;)&#10;    print(f&quot;-----------------------------------&quot;)&#10;    while True:&#10;        print(&quot;\nWhat would you like to do?&quot;)&#10;        print(&quot;1. Deposit\n2. Withdraw\n3. Check Balance\n4. Exit&quot;)&#10;        choice = input(&quot;Enter your choice (1-4): &quot;).strip()&#10;        if choice == '1':&#10;            amount_str = input(&quot;Enter amount to deposit: &quot;).strip()&#10;            try:&#10;                amount = float(amount_str)&#10;                account1.deposit(amount)&#10;            except ValueError:&#10;                print(&quot;Invalid amount. Please enter a number.&quot;)&#10;        elif choice == '2':&#10;            amount_str = input(&quot;Enter amount to withdraw: &quot;).strip()&#10;            try:&#10;                amount = float(amount_str)&#10;                account1.withdraw(amount)&#10;            except ValueError:&#10;                print(&quot;Invalid amount. Please enter a number.&quot;)&#10;        elif choice == '3':&#10;            print(f&quot;Current balance: ${account1.get_balance():.2f}&quot;)&#10;        elif choice == '4':&#10;            print(&quot;Thank you for using the Bank Account Manager. Goodbye!&quot;)&#10;            break&#10;        else:&#10;            print(&quot;Invalid choice. Please try again.&quot;)&#10;main()" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>